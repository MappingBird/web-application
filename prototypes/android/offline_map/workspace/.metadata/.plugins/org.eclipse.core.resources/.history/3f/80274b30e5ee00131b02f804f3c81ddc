package com.mappingbird;

import java.io.File;
import java.io.FileOutputStream;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.json.JSONArray;

import android.app.DownloadManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;
import android.content.Context;

public class MapTileDownloaderTask extends AsyncTask<String, Void, JSONArray> {
	static final String API_TILEPATHS = "http://mappingbirds.appspot.com/getMapTilePathZXY?address=%s&zoom=%s";
	static final String API_TILEIMAGE_SRC = "http://api.tiles.mapbox.com/v3/examples.map-zr0njcqy/%s";
	static final String OFFLINE_TILES_HOME = "offline_tiles";
	static final String TAG = "MapTileDownloaderTask";
	static final Context context_ = MainActivity.getContext();
		
	
	protected JSONArray doInBackground(String ... params) {
		JSONArray tilePaths = null;	
		
		try {
			//-- get tile download paths from Web
			HttpClient client = new DefaultHttpClient();			
			String uri = String.format(API_TILEPATHS, params[0], Constants.DEFAULT_MAP_ZOOM);
			HttpGet getRequest = new HttpGet(uri);
			HttpResponse response;			
			response = client.execute(getRequest);
			String resp = EntityUtils.toString(response.getEntity());		

			JSONObject json = new JSONObject(resp);
			tilePaths = json.getJSONObject("tile").getJSONArray("paths");
			String formattedAddr = json.getString("formatted_address");
			
			//-- download tile images
			DownloadManager dm = (DownloadManager) context_.getSystemService(Context.DOWNLOAD_SERVICE);			
			for (int i = 0; i < tilePaths.length(); i++) {
				String tileZXY = tilePaths.getString(i);				
				String tileDir = tileZXY.substring(0, tileZXY.lastIndexOf("/"));
				String tileLocalPath = String.format("%s/%s/%s", formattedAddr, tileDir);
				File tileLocalPath_f = new File(tileLocalPath);
				if (! tileLocalPath_f.exists()) 
					tileLocalPath_f.mkdirs();				
				
				String tileImageUri = String.format(API_TILEIMAGE_SRC, tileZXY);
				Uri tileUri = Uri.parse(tileImageUri);
				DownloadManager.Request req = new DownloadManager.Request(tileUri);
				req.setDestinationInExternalFilesDir(context_, formattedAddr, tileZXY);
//				req.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
				dm.enqueue(req);
			}
								
		} catch (Exception e) {
			java.io.StringWriter sw = new java.io.StringWriter();
			e.printStackTrace(new java.io.PrintWriter(sw));			
			Log.e(TAG, sw.toString());
		}
		
		return tilePaths;
	}
	
	protected void onPostExecute(JSONArray tilePaths) {		
		if (null == tilePaths ) return;
	
		
//		try {			
//			File tilesDir = new File(appFilesDir_, "offline_map_tiles");	    		
//			if (!tilesDir.exists()) tilesDir.mkdir();
//			File cityTilesDir = new File(tilesDir, "Taichung City, Taiwan");
//			if (!cityTilesDir.exists()) cityTilesDir.mkdir();
//									
//			File tile = new File(cityTilesDir, "tile1.tmp");													
//			FileOutputStream fos = new FileOutputStream(tile);					
//			fos.write("hellow string".getBytes());
//			fos.close();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
}


  

